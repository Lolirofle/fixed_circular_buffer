var searchIndex = {};
searchIndex['fixed_circular_buffer'] = {"items":[[0,"","fixed_circular_buffer","",null,null],[3,"CircularBuffer","","Fixed size circular/cyclic/ring buffer",null,null],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"circularbuffer"},{"name":"circularbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"circularbuffer"},{"name":"circularbuffer"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"circularbuffer"}],"output":{"name":"circularbuffer"}}],[11,"len","","Returns the number of elements (before starting to loop around).",0,{"inputs":[{"name":"circularbuffer"}],"output":{"name":"usize"}}],[11,"queue","","Enqueues (push at beginning) the given element at the beginning of the buffer\nDequeues (pop at end) the last element and returns it\nThis keeps the the buffer length",0,{"inputs":[{"name":"circularbuffer"},{"name":"t"}],"output":{"name":"t"}}],[11,"set_first","","Sets the offset for the first element, relative to the currently first element\nWhen `index` is out of range, it loops around",0,{"inputs":[{"name":"circularbuffer"},{"name":"usize"}],"output":null}],[11,"get","","Returns a reference to the element at the given index\nWhen `index` is out of range, it loops around",0,{"inputs":[{"name":"circularbuffer"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the element at the given index\nWhen `index` is out of range, it loops around",0,{"inputs":[{"name":"circularbuffer"},{"name":"usize"}],"output":{"name":"t"}}],[11,"swap_internal","","Swaps the two elements at the given indices `a` and `b`.\nWhen `a` or `b` are out of range, they loop around",0,{"inputs":[{"name":"circularbuffer"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap","","Swaps the element at the given index with the specifiied new one.\nWhen `a` or `b` are out of range, they loop around",0,{"inputs":[{"name":"circularbuffer"},{"name":"usize"},{"name":"t"}],"output":{"name":"t"}}],[11,"iter_circular","","Returns an iterator over the buffer looping around at the end.\nThis creates a never ending iterator",0,{"inputs":[{"name":"circularbuffer"}],"output":{"name":"skip"}}],[11,"iter","","Returns an iterator over the buffer without looping around.",0,{"inputs":[{"name":"circularbuffer"}],"output":{"name":"take"}}],[11,"from_raw_parts","","Constructs the structure from its raw components",0,{"inputs":[{"name":"circularbuffer"},{"name":"box"},{"name":"usize"}],"output":{"name":"self"}}],[11,"into_raw_parts","","Deconstructs the structure into its raw components",0,null],[11,"from","","",0,{"inputs":[{"name":"circularbuffer"},{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"circularbuffer"},{"name":"box"}],"output":{"name":"self"}}],[11,"from_iter","","",0,{"inputs":[{"name":"circularbuffer"},{"name":"i"}],"output":{"name":"self"}}]],"paths":[[3,"CircularBuffer"]]};
initSearch(searchIndex);
